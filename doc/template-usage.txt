Template Usage

This document describes how templates are designed to be used.

First, an important detail in how these templates are implemented. Where 
the programmer includes the template file, that is exactly where the 
template will be expanded into actual code. Therefore, before including the 
template file, itself, for example, "array_list_decl.t.h", the programmer must 
first define several things that will be used by the template. A list of such 
define requirements follow:

For single-data-type templates:
- COLN_DATA_TYPE: the data type for which this collection is created (e.g. int)
- COLN_DATA_COPY: (optional) a function with the signature:
  bool COLN_DATA_COPY(COLN_DATA_TYPE *dest, COLN_DATA_TYPE *src);
  that may be used to copy more complicated structures. dest is assumed to be 
  uninitialized or cleared. If not defined, memcpy will be used internally if 
  an object of type COLN_DATA_TYPE needs to be copied.
- COLN_DATA_MOVE: (optional) a function with the signature:
  void COLN_DATA_MOVE(COLN_DATA_TYPE *dest, COLN_DATA_TYPE *src);
  that may be used to move more complicated structures. dest is assumed to be 
  uninitialized or cleared. If not defined, memcpy will be used internally if 
  an object of type COLN_DATA_TYPE needs to be copied. In most cases, a defined 
  move function will not be needed. However, this may be useful for types with 
  back pointers. For example, a custom move function could be defined for a 
  tree node with parent pointers so that it updates the parent's appropriate 
  child pointer and each child's parent pointer.
- COLN_DATA_CLEAR: (optional) a function with the signature:
  void COLN_DATA_CLEAR(COLN_DATA_TYPE *to_clear);
  that may be used to clear more complicated structures. If not defined, no 
  operation will be performed when objects are cleared up.
- COLN_DATA_EQUALS: (optional) a function with the signature:
  bool COLN_DATA_EQUALS(COLN_DATA_TYPE *a, COLN_DATA_TYPE *b);
  that is used to determine equality. If not defined, one of two cases is 
  possible:
  - If COLN_DATA_COMPARE is defined, it will be used to implement the equality 
    function.
  - If COLN_DATA_COMPARE is not defined, the source code for linear search will 
    not be included.
- COLN_DATA_COMPARE: (optional) a function with the signature:
  int COLN_DATA_COMPARE(COLN_DATA_TYPE *a, COLN_DATA_TYPE *b);
  that will return -1 if a < b, 0 if a == b, or 1 if a > b. If not defined:
  - The source code for sorting array lists will not be included.
  - The source code for binary searching array lists will not be included.
  - Attempts to use tree-based templates will emit a compilation error.
- COLN_DATA_HASH: (optional) a function with the signature:
  size_t COLN_DATA_HASH(COLN_DATA_TYPE *to_hash);
  that will hash the data in COLN_DATA_TYPE. If not defined, attempts to use 
  hash-table-based templates will emit a compilation error.
For any map:
- COLN_KEY_TYPE: the "key" data type for which this collection is created
- COLN_KEY_COPY_FN: (optional) function to copy a key. (See COLN_DATA_COPY_FN)
- COLN_KEY_MOVE_FN: (optional) function to move a key. (See COLN_DATA_MOVE_FN)
- COLN_KEY_CLEAR_FN: (optional) function to clear a key. (See 
  COLN_DATA_CLEAR_FN)
- COLN_VALUE_TYPE: the "value" data type for which this collection is created
- COLN_VALUE_COPY_FN: (optional) function to copy a value. (See 
  COLN_DATA_COPY_FN)
- COLN_VALUE_MOVE_FN: (optional) function to move a value. (See 
  COLN_DATA_MOVE_FN)
- COLN_VALUE_CLEAR_FN: (optional) function to clear a value. (See 
  COLN_DATA_CLEAR_FN)
For tree map:
- COLN_KEY_CMP_FN: a function with the signature:
  int COLN_KEY_CMP_FN(COLN_KEY_TYPE *a, COLN_KEY_TYPE *b);
  that will return -1 if a < b, 0 if a == b, or 1 if a > b. If not defined, 
  attempts to use the tree map will emit a compilation error.
For hash map:
- COLN_KEY_HASH_FN: a function with the signature:
  size_t COLN_KEY_HASH_FN(COLN_KEY_TYPE *to_hash);
  that will hash the data in COLN_KEY_TYPE. If not defined, attempts to use 
  the hash map template will emit a compilation error.
For all collection templates:
- COLN_TYPE: (required) the typename of the collection being generated
- COLN_ERR_HANDLING_TYPE: (optional) designates what scheme to use for 
  handling errors when they happen. If not defined, COLN_EHT_RET will be used. 
  Available options:
  - COLN_EHT_RET: returns an error code.
  - COLN_EHT_EXIT: exits immediately when an error occurs.
  - COLN_EHT_NO_CHECK: code will not check for the presence of errors at all. 
    If an error happens, this may result in undefined behavior later in the 
    process, but will be the most performant.
- COLN_ALLOC_TYPE: (optional) the type of a custom allocator struct, if 
  specified.
- COLN_ALLOC_FN: (required if COLN_ALLOC_TYPE is defined) an allocation 
  function with the signature:
  void *COLN_ALLOC_FN(COLN_ALLOC_TYPE *allocator, size_t size_to_alloc);
- COLN_FREE_FN: (optional) a deallocation function with the signature:
  void COLN_FREE_FN(COLN_ALLOC_TYPE *allocator, void *to_free);
  with the precondition that to_free was previously allocated with 
  COLN_ALLOC_FN.
